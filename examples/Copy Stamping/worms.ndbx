<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ndbx formatVersion="0.9" type="file">
    <var name="canvasWidth" value="500.0"/>
    <var name="canvasHeight" value="200.0"/>
    <var name="canvasBackground" value="#091b40ff"/>
    <node name="compound1" prototype="corevector.compound" x="230" y="50">
        <param name="function">
            <value>intersected</value>
        </param>
        <param name="fill">
            <value>#0000004a</value>
        </param>
        <param name="stroke">
            <value>#0c0000ff</value>
        </param>
        <param name="strokeWidth">
            <value>0.3</value>
        </param>
    </node>
    <node name="copy1" prototype="corevector.copy" x="120" y="160">
        <param name="_code">
            <value type="python"><![CDATA[from nodebox.node import StampExpression
from nodebox.graphics import Geometry, Transform

def cook(self):
    if self.shape is None:
        return None
    g = Geometry()
    tx = ty = r = 0.0
    sx = sy = 1.0
    if self.stamp:
        stamp = StampExpression(self.node, "expr")
    for i in xrange(self.copies):
        if self.stamp:
            context.put('CNUM', i)
            stamp.evaluate(context)
            self.node.stampExpressions(context)
        t = Transform()
        # Each letter of the order describes an operation.
        for op in self.order:
            if op == 't':
                t.translate(tx, ty)
            elif op == 'r':
                t.rotate(r)
            elif op == 's':
                t.scale(sx, sy)
        new_shape = t.map(self.shape)
        g.extend(new_shape)
        tx += self.tx
        ty += self.ty
        r += self.r
        sx += self.sx / 100.0
        sy += self.sy / 100.0
    return g]]></value>
        </param>
        <param name="copies">
            <value>32</value>
        </param>
        <param name="order">
            <value>rts</value>
        </param>
        <param name="tx">
            <expression>ellipse2.width/2.5</expression>
        </param>
        <param name="sx">
            <value>-3.0</value>
        </param>
        <param name="sy">
            <value>-3.0</value>
        </param>
        <param name="stamp">
            <value>1</value>
        </param>
        <param name="expr">
            <value>segment=CNUM</value>
        </param>
    </node>
    <node name="edit1" prototype="corevector.edit" x="110" y="260">
        <param name="pointDeltas">
            <value>P 0 -9.921 53.395 P 3 1.750 -40.372</value>
        </param>
    </node>
    <node name="ellipse2" prototype="corevector.ellipse" x="20" y="160">
        <param name="y">
            <expression>if (stamp("rot",2)&lt;16) { 4.0*Math.sin(stamp("segment",2)/stamp("divider",2)) } else { -4.0*Math.sin(stamp("segment",2)/stamp("divider",2)) }</expression>
        </param>
        <param name="width">
            <expression>1.0+stamp("rot",2)%6</expression>
        </param>
        <param name="height">
            <expression>width</expression>
        </param>
        <param name="fill">
            <expression>color(stamp("segment",2)%4, .6-(stamp("segment",2)%2)/2, .8, 1.00)</expression>
        </param>
        <param name="stroke">
            <value>#3be5e3ff</value>
        </param>
        <param name="strokeWidth">
            <value>0.3</value>
        </param>
    </node>
    <node name="merge1" prototype="corevector.merge" x="320" y="140"/>
    <node name="place1" prototype="corevector.place" rendered="true" x="420" y="250">
        <param name="_code">
            <value type="python"><![CDATA[from nodebox.node import StampExpression
from nodebox.graphics import Path, Geometry, Transform

def cook(self):
    if self.shape is None: return None
    if self.template is None: return self.shape.clone()

    if self.stamp:
        stamp = StampExpression(self.node, "expr")
        stamp1 = StampExpression(self.node, "expr1")
    g = Geometry()
    for i, point in enumerate(self.template.points):
        if self.stamp:
            context.put('CNUM', i)
            stamp.evaluate(context)
            stamp1.evaluate(context)
            self.node.stampExpressions(context)
            
        t = Transform()
        t.translate(point.x, point.y)
        newShape = t.map(self.shape)
        g.extend(newShape)
    return g]]></value>
        </param>
        <param name="stamp">
            <value>1</value>
        </param>
        <param name="expr">
            <value>rot=random(CNUM,0,36)</value>
        </param>
        <param name="expr1" type="string" widget="stamp_expression">
            <value>divider=random(CNUM,2.0,7.0)</value>
        </param>
    </node>
    <node name="rect1" prototype="corevector.rect" x="120" y="40">
        <param name="x">
            <value>14.0</value>
        </param>
        <param name="width">
            <value>120.0</value>
        </param>
        <param name="height">
            <value>30.0</value>
        </param>
    </node>
    <node name="rect2" prototype="corevector.rect" x="20" y="260">
        <param name="width">
            <value>300.0</value>
        </param>
    </node>
    <node name="scatter1" prototype="corevector.scatter" x="200" y="260">
        <param name="amount">
            <value>90</value>
        </param>
    </node>
    <conn input="copy1" output="ellipse2" port="shape"/>
    <conn input="compound1" output="rect1" port="shape"/>
    <conn input="compound1" output="copy1" port="shapeB"/>
    <conn input="merge1" output="copy1" port="shapes"/>
    <conn input="merge1" output="compound1" port="shapes"/>
    <conn input="edit1" output="rect2" port="shape"/>
    <conn input="scatter1" output="edit1" port="shape"/>
    <conn input="place1" output="merge1" port="shape"/>
    <conn input="place1" output="scatter1" port="template"/>
</ndbx>
