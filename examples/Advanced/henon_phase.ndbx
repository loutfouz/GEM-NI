<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ndbx formatVersion="0.9" type="file">
    <node name="color1" prototype="corevector.color" x="110" y="170">
        <param name="fill">
            <expression>hsb(stamp("d",40)/200.0,.95,.75, 1.0)</expression>
        </param>
        <param name="strokeWidth">
            <value>0.1</value>
        </param>
    </node>
    <node name="copy1" prototype="corevector.copy" rendered="true" x="420" y="180">
        <param name="copies">
            <value>50</value>
        </param>
        <param name="stamp">
            <value>1</value>
        </param>
        <param name="expr">
            <value>d=random(CNUM,1,100)</value>
        </param>
    </node>
    <node name="ellipse1" prototype="corevector.ellipse" x="30" y="170">
        <param name="width">
            <value>2.0</value>
        </param>
        <param name="height">
            <expression>width</expression>
        </param>
    </node>
    <node name="henonphase" prototype="corevector.generator" x="110" y="250">
        <description>Henon Phase is an ancient strange attractor.</description>
        <param name="_code">
            <value type="python"><![CDATA['''
In computing time scales, the Henon Phase is an ancient strange attractor. 
A point is moved through two dimensional space based on the following transformational equations:
    xn+1 = xn cos(a) - (yn - xn2) sin(a)
    yn+1 = xn sin(a) + (yn - xn2) cos(a)
Images plot the phase space of the Henon system at arbitrary values of a.

'''

from math import sin,cos
from random import randint

from nodebox.graphics import Path

def henonPhase(a, diameter, number, scale):
    p = Path()
    p.fill = None
    x0,y0 = diameter,0.0
    for i in range(number):
        pow = x0 * x0
        Co = cos(a)
        Si = sin(a)
        cc = (y0 - pow) * Co
        ss = (y0 - pow) * Si
        x1 = (x0 * Co) - ss
        y1 = (x0 * Si) + cc   
        p.addPoint(x1 * scale,y1 * scale)    
        x0 = x1
        y0 = y1
    return p


def cook(self):
    henon = henonPhase(self.a, self.diameter / 100.0, self.number, self.scale)
    return henon.asGeometry()]]></value>
        </param>
        <param name="_image">
            <value>henon.png</value>
        </param>
        <param name="number" type="float">
            <value>400.0</value>
        </param>
        <param name="scale" type="float">
            <value>200.0</value>
        </param>
        <param name="diameter" type="float">
            <expression>stamp("d",40)</expression>
        </param>
        <param name="a" type="float">
            <value>3.5</value>
        </param>
    </node>
    <node name="place3" prototype="corevector.place" x="230" y="180">
        <param name="_code">
            <value type="python"><![CDATA[from nodebox.node import StampExpression
from nodebox.graphics import Path, Geometry, Transform

def cook(self):
    if self.shape is None: return None
    if self.template is None: return self.shape.clone()

    if self.stamp:
        stamp = StampExpression(self.node, "expr")
        
    g = Geometry()
    for i, point in enumerate(self.template.points):
        if self.stamp:
            context.put('CNUM', i)
            stamp.evaluate(context)
            self.node.stampExpressions(context)
            
        t = Transform()
        t.translate(point.x, point.y)
        newShape = t.map(self.shape)
        g.extend(newShape)
    return g]]></value>
        </param>
    </node>
    <conn input="copy1" output="place3" port="shape"/>
    <conn input="color1" output="ellipse1" port="shape"/>
    <conn input="place3" output="color1" port="shape"/>
    <conn input="place3" output="henonphase" port="template"/>
</ndbx>
